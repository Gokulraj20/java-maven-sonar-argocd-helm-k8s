pipeline {
  agent any  /* {
    docker {
        image 'maven:3.8.1-adoptopenjdk-11'
    //  image 'abhishekf5/maven-abhishek-docker-agent:v1'
    //  args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }*/
  tools{
      maven 'maven'
      dockerTool 'docker'
  }
  environment{
      IMAGE_TAG= "${BUILD_NUMBER}"
      IMAGE_NAME= "gokulraj20/ultimate-cicd"
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/Gokulraj20/java-maven-sonar-argocd-helm-k8s'
        checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Gokulraj20/java-maven-sonar-argocd-helm-k8s']])
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
   /* stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://34.201.116.83:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }*/
    /*  stage('Build and push Image'){
          steps{
              sh 'docker build -t ${IMAGE_NAME} .'
              sh 'docker login'
              sh 'docker push ${IMAGE_NAME}'
              
          }
      }*/
 /*   stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "gokulraj20/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }*/
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_HUB_REPO = "gokulraj20/ultimate-cicd"
        DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKERFILE_PATH = "spring-boot-app/Dockerfile"
        DOCKER_REGISTRY_CREDENTIALS = credentials('docker-cred')
       }
       steps {
         script {
           def dockerImage = docker.build("${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}", "--file ${DOCKERFILE_PATH} .")
           docker.withRegistry("https://index.docker.io/v1/", "docker-cred") {
           dockerImage.push()
      }
    }
  }
}
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "java-maven-sonar-argocd-helm-k8s"
            GIT_USER_NAME = "Gokulraj20"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "gokulrajpkpj@gmail.com"
                    git config user.name "Gokulraj20"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s#${IMAGE_NAME}.*#${IMAGE_NAME}:${IMAGE_TAG}#g" spring-boot-app-manifests/deployment.yaml
                    git add spring-boot-app-manifests/deployment.yaml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
       
    }
  }
   post{
        success{
            emailext body: 'The Build was successfully completed',
                subject: 'Build successful',
                to: 'gokulrajpkpj@gmail.com'     // replace email id
        }
        failure{
            emailext body: 'The Build failed',
                subject: 'Build failure',
                to: 'gokulrajpkpj@gmail.com'    // replace email id
        }
    }
}
